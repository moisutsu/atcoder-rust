# Path to the test file (Liquid template)
#
# Variables:
#
# - `manifest_dir`: Package directory
# - `contest`:      Contest ID (e.g. "abc100")
# - `problem`:      Problem index (e.g. "A", "B")
#
# Additional filters:
#
# - `kebabcase`: Convert to kebab case (by using the `heck` crate)
test-suite = "{{ manifest_dir }}/testcases/{{ problem | kebabcase }}.yml"
#test-suite = "./testcases/{{ contest }}/{{ problem | kebabcase }}.yml"

# Open files with the command (`jq` command)
#
# VSCode:
open = '["bash", "-c"] + ["code -a " + .manifest_dir + " && code " + (.paths | map([.src, .test_suite]) | flatten | join(" "))]'
# Emacs:
#open = '["emacsclient", "-n"] + (.paths | map([.src, .test_suite]) | flatten)'

[new]
# Platform
#
# - atcoder
# - codeforces
# - yukicoder
platform = "atcoder"
# Path (Liquid template)
#
# Variables:
#
# - `contest`:      Contest ID. **May be nil**
# - `package_name`: Package name
path = "./{{ contest }}"

[new.template]
#lockfile = "/path/to/cargo-lock-template.toml"

[new.template.dependencies]
kind = "inline"
content = '''
proconio = { version = "0.3.6", features = ["derive"] }
itertools = "=0.9.0"
'''

[new.template.src]
kind = "inline"
content = '''
use proconio::*;
#[allow(unused_imports)]
use proconio::marker::*;

#[allow(unused_macros)]
macro_rules! echo {
    ($ x : expr ) => {
        println!("{}", $x);
    };
}

#[fastout]
#[allow(non_snake_case)]
fn main() {
    input! {
        N: i32,
    }
    let mut ans = N;
    echo!(ans);
}
'''

#[submit.transpile]
#kind = "command"
#args = ["cargo", "equip", "--oneline", "mods", "--rustfmt", "--check", "--bin", "{{ bin_name }}"]
#language_id = ""

#[submit.via-binary]
#target = "x86_64-unknown-linux-musl"
##cross = "cross"
#strip = "strip"
##upx = "upx"
